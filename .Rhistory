boxplot(mpg ~ am, data = mtcars, main= "mpg by transmission type", xlab = "Transmission type", ylab = "mpg")
axis(1, at=1:2, labels=lab)
boxplot(mpg ~ am, data = mtcars, main= "mpg by transmission type", xlab = "Transmission type", ylab = "mpg", xaxt="n")
axis(1, at=1:2, labels=lab)
par(mfrow = c(2, 2))
plot(lm(mpg ~ wt + qsec + am + wt:am, data = mtcars))
?mtcars
t.test(mpg ~ am, data = mtcars)
install.packages("knitr")
knitr
install.packages("manager")
summary(mtcars$mpg)
par(mfrow = c(4, 4))
summary(.$mpg)
summary(mtcars$.)
summary(mtcars$mpg, mtcars$cyl, mtcars$disp, mtcars$hp, mtcars$drat, mtcars$wt, mtcars$qsec, mtcars$vs, mtcars$am, mtcars$gear, mtcars$carb)
summary(mtcars$mpg + mtcars$cyl + mtcars$disp + mtcars$hp + mtcars$drat + mtcars$wt + mtcars$qsec + mtcars$vs + mtcars$am + mtcars$gear + mtcars$carb)
summary(mtcars$mpg) + summary(mtcars$cyl) + summary(mtcars$disp) + summary(mtcars$hp) + summary(mtcars$drat) + summary(mtcars$wt) + summary(mtcars$qsec) + summary(mtcars$vs) + summary(mtcars$am) + summary(mtcars$gear) + summary(mtcars$carb)
summary(mtcars$mpg); summary(mtcars$cyl); summary(mtcars$disp); summary(mtcars$hp); summary(mtcars$drat); summary(mtcars$wt); summary(mtcars$qsec); summary(mtcars$vs); summary(mtcars$am); summary(mtcars$gear); summary(mtcars$carb)
table(4,4)
table(nrow=4,ncol=4)
?summary
table("2", "3", "5", "7")
table(mpg=summary(mtcars$mpg); cyl=summary(mtcars$cyl); disp=summary(mtcars$disp); hp=summary(mtcars$hp); drat=summary(mtcars$drat); wt=summary(mtcars$wt); qsec=summary(mtcars$qsec); vs=summary(mtcars$vs); am=summary(mtcars$am); gear=summary(mtcars$gear); carb=summary(mtcars$carb))
table(mpg=summary(mtcars$mpg), cyl=summary(mtcars$cyl), disp=summary(mtcars$disp), hp=summary(mtcars$hp), drat=summary(mtcars$drat), wt=summary(mtcars$wt), qsec=summary(mtcars$qsec), vs=summary(mtcars$vs), am=summary(mtcars$am), gear=summary(mtcars$gear), carb=summary(mtcars$carb))
summary(mtcars$mpg); summary(mtcars$cyl); summary(mtcars$disp); summary(mtcars$hp); summary(mtcars$drat); summary(mtcars$wt); summary(mtcars$qsec); summary(mtcars$vs); summary(mtcars$am); summary(mtcars$gear); summary(mtcars$carb)
write.table(summary(mtcars$mpg); summary(mtcars$cyl); summary(mtcars$disp); summary(mtcars$hp); summary(mtcars$drat); summary(mtcars$wt); summary(mtcars$qsec); summary(mtcars$vs); summary(mtcars$am); summary(mtcars$gear); summary(mtcars$carb))
write.table(summary(mtcars$mpg), summary(mtcars$cyl), summary(mtcars$disp), summary(mtcars$hp), summary(mtcars$drat), summary(mtcars$wt), summary(mtcars$qsec), summary(mtcars$vs), summary(mtcars$am), summary(mtcars$gear), summary(mtcars$carb))
?write.table
write.table(summary(mtcars$mpg), summary(mtcars$cyl), summary(mtcars$disp), summary(mtcars$hp), summary(mtcars$drat), summary(mtcars$wt), summary(mtcars$qsec), summary(mtcars$vs), summary(mtcars$am), summary(mtcars$gear), summary(mtcars$carb), sep=" ", col.names=T)
library(rgl)
install.packages("rgl")
library(rgl)
plot3d(x1,x2,y)
a1 <- lm(factor(cyl) ~ wt, mtcars)
a1
a1$coef
a1 <- lm(as.factor(cyl) ~ wt, mtcars)
a1
a1 <- lm(mpg ~ as.factor(cyl) + wt, mtcars)
a1
a2 <- lm(mpg ~ as.factor(cyl) + wt, mtcars)
a2 <- lm(mpg ~ as.factor(cyl) , mtcars)
a2
b <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
b
?mtcars
b2 <- lm(mpg ~ I(wt) + factor(cyl), data = mtcars)
b2
hat(x, intercept = TRUE)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
hat(x, intercept = TRUE)
hat(y, intercept = TRUE)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
hat(x, intercept = TRUE)
c <- hat(x, intercept = TRUE)
dfbeta(c)
c <- hat(lm(x ~ y), intercept = TRUE)
dfbeta(hat(x, intercept = TRUE))
dfbeta(0.9946)
dfbeta(11.72, 1.344)
d <- lm(x ~ y)
hat(d, intercept = T)
?dfbeta
dfbetas(11.72, 1.344)
plot(x)
plot(y)
par(c(2,2))
plot(x)
> fit<-lm(mpg~factor(cyl)+wt,data=mtcars)
> fit1<-lm(mpg~factor(cyl)+wt+interaction(cyl,wt),data=mtcars)
fit<-lm(mpg~factor(cyl)+wt,data=mtcars)
fit1<-lm(mpg~factor(cyl)+wt+interaction(cyl,wt),data=mtcars)
anova(fit, fit1)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
regmodel=lm(y~x)
regmodel
dfbetas(regmodel)
influence(regmodel)
library(swirl)
swirl()
ravenData
mdl <- glm(ravenWinNum ~ ravenScore, binomial, ravenData)
lods <- predict(mdl, data.frame(ravenScore=c(0, 3, 6))
)
lodds <- predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
rpois(n=1000, lambda)
var(rpois(1000, 50))
tail(hits)
class(hits[,'date'])
as.integer(head(hits[,'date']))
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
exp(confint(mdl, 'date'))
which.max(hits[,'visits'])
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
mdl2 <- glm(log(visits+1))
mdl2 <- glm(log(visits+1 ~ date, poisson, hits))
mdl2 <- glm(visits+1 ~ date, poisson, hits)
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits, offset = log(visits + 1)
)
qpois(.95, mdl2$fitted.values[704])
a <- lm(mpg ~ cyl + disp + hp + drat + wt + qsec + vs + am + gear + carb, mtcars)
b <- step(lm(mpg ~ wt + qsec + am, mtcars), direction = "backward", k = 2)
anova(a,b)
anova(b,a)
library(MASS)
?shuttle
head(shuttle)
a <- lm(use$auto ~ !use$auto,shuttle)
a <- lm(use[auto] ~ !use[auto],shuttle)
a <- lm(use ~ wind,shuttle)
a
a <- lm(wind ~ use,shuttle)
a
loga <- glm(wind="tail" ~ wind="tail", family = binomial)
loga <- glm(shuttle$wind="tail" ~ shuttle$wind="tail", family = binomial)
loga <- glm(shuttle$wind<-"tail" ~ shuttle$wind="tail", family = binomial)
loga <- glm(shuttle$wind<-"tail" ~ shuttle$wind<-"tail", family = binomial)
b <- shuttle$wind ="tail"
a$coef
exp(glm(use ~ wind, family = "binomial"))
exp(glm(shutter$use ~ shutter$wind, family = "binomial"))
exp(glm(use ~ wind, data = shutter, family = "binomial"))
exp(glm(use ~ wind, data = shuttle, family = "binomial"))
glm(use ~ wind, data = shuttle, family = "binomial")
b <-glm(use ~ wind, data = shuttle, family = "binomial")
exp(b$coeff)
require(MASS)
exp(cbind(coef(x), confint(x)))
anova(b,magn)
anova(b,shuttle$magn)
glm(b ~ magn, binomial, shuttle)
glm(use ~ wind ~ magn, binomial, shuttle)
glm(use ~ wind + magn, binomial, shuttle)
c <- glm(use ~ wind + magn, binomial, shuttle)
exp(c$coeff)
useyes<- shuttle$use=="auto"
useno<- !useyes
fityes <- glm(useyes ~ shuttle$wind,family="binomial")
fitno <- glm(useno ~ shuttle$wind,family="binomial")
fityes$coeff
fitno$coeff
fit2 <- glm(auto ~ wind + magn, binomial, shuttle)
fit2 <- glm(use ~ wind + magn, binomial, shuttle)
fit2
insectSprays
InsectSprays
summary(InsectSprays)
anova(InsectSprays$A, InsectSprays$B)
?InsectSprays
y <- rep(InsectSprays$A, InsectSprays$A)
y
InsectSprays$A
head(InsectSpray)
head(InsectSprays)
y <- rep(InsectSprays$spray="A", InsectSprays$spray="B")
y <- rep(InsectSprays$spray["A"], InsectSprays$spray["B"])
d <- InsectSprays="A"
d <- InsectSprays["A"]
d <- InsectSprays[A]
d <- InsectSprays$spray[A]
d <- InsectSprays$spray
d
e <- d$A
e <- d[A]
e <- d[[A]]
model2q <- glm(InsectSprays$spray, family="quasipoisson")
model2q <- glm(InsectSprays, family="quasipoisson")
exp( confint.default(model2q) )
plot(model2q)
madel <- glm(InsectSprays$spray, family="poisson")
madel <- glm(InsectSprays$sprayA ~ InsectSprays$sprayB, family="poisson")
model <- glm(spray$A ~ spray$B, family = "poisson", dat = InsectSprays)
model <- glm(A ~ B, family = "poisson", dat = InsectSprays)
model <- glm(spray, family = "poisson", dat = InsectSprays)
model <- glm(A ~ B, family = "poisson", data = InsectSprays)
model <- glm(spray, family = "poisson", data = InsectSprays)
?InsectSprays
model <- glm(spray, family = "poisson", data = InsectSprays)
model <- glm(InsectSprays$spray ~ InsectSprays$obs, family = "poisson")
head(InsectSprays)
model <- glm(InsectSprays$spray ~ InsectSprays$count, family = "poisson")
InsectSprays
model <- glm(InsectSprays$count ~ InsectSprays$spray, family = "poisson")
model
2.67415 / 0.05588
0.05588 /2.67415
fit <- glm(use ~ wind, family='binomial', shuttle)
exp(fit$coeff)
fit <- glm(use ~ wind + as.factor(magn), family='binomial', shuttle)
exp(fit$coeff)
outp <- exp(coef(glm(count ~ as.factor(spray) - 1, family="poisson", InsectSprays)))
outp
outp[1]/outp[2]
?offset
log(10)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(y ~ x)
d1 <- c(0, 0 ,0, 0, 0, 0, 1 , 1, 1 , 1 , 1)
d2 <- c(1, 1 ,1, 1, 1, 1, 0 , 0, 0, 0 , 0)
summary(lm(y ~ d1*x))
exp(fit$coeff)
summary(lm(y ~ x))
x1 <- c(0:5)
y1 <- c(0.93, 2.05, 2.54, 3.87, 4.97)
lm(x1 ~ y1)
x1 <- c(1:5)
lm(x1 ~ y1)
j <-lm(x1 ~ y1)
j$coeff
fit <- glm(use ~ wind + as.factor(magn), family='binomial', shuttle)
exp(fit$coeff)
fit <- glm(use ~ wind, family='binomial', shuttle)
exp(fit$coeff)
t1 <- log(5)
t2 <- t1 + log(10)
count <- rnomr(10)
count <- rnom(10)
count <- rnorm(10)
x <- c(-5:5)
glm(count ~ x + offset(t1), family= poisson)
x <- c(-5:4)
glm(count ~ x + offset(t1), family= poisson)
offset(t1)
x + offset(t1)
count
?offset
log(10)
glm(count ~ x + t1, family= poisson)
?glm
glm(count ~ x + model.offset(t1), family= poisson)
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
training
cut <- cut2(training$Cement)
install.packages("Hmisc")
cut <- cut2(training$Cement)
plot(training$CompressiveStrength,pch=1,col=cut2(training$FlyAsh,m=20))
install.packages("cut2")
hist(testing$Superplasticizer)
hist(training$Superplasticizer)
hist(testing$Superplasticizer)
hist(training$Superplasticizer)
hist(log10(training$Superplasticizer))
hist(log10(testing$Superplasticizer))
hist(log10(testing$Superplasticizer))
hist(log10(training$Superplasticizer))
hist(log10(training$Superplasticizer))
hist(log10(testing$Superplasticizer))
testing$Superplasticizer
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
a <- predictors$IL.
a
a <- predictors[IL,.]
a <- predictors[IL,]
?preProcess
preProcess(predictors,thresh = 0.9)
preProcess(as.numeric(predictors),thresh = 0.9)
prComp(precictors)
?prComp
install.packages("prComp")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.7,list=F)
training<-segmentationOriginal[inTrain,]
testing<-segmentationOriginal[-inTrain,]
set.seed(125)
modFit <- train(Case~., method="rpart",data=training)
predict(modFit,newdata=testing)
inTrain <- createDataPartition(y=segmentationOriginal$Class, p=0.7,list=F)
training<-segmentationOriginal[inTrain,]
testing<-segmentationOriginal[-inTrain,]
set.seed(125)
modFit <- train(Class~., method="rpart",data=training)
predict(modFit,newdata=testing)
library(rattle)
install.packages("rattle")
fancyRPartPlot(modFit$finalModel)
library(rattle)
fancyRPartPlot(modFit$finalModel)
fancyRpartPlot(modFit$finalModel)
plot(modFit$finalModel, uniform=T)
text(modFit$finalModel, use.n=T,all=T, cex=.8)
install.packages("pgmn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modFit2<-train(chd~age+alcohol+obesity+tobacco+typea+ldl, data=training,family="binomial", method="glm")
modFit2<-train(chd~age+alcohol+obesity+tobacco+typea+ldl, data=trainSA,family="binomial", method="glm")
missClass = function(modFit2,testSA){sum(((testSA > 0.5)*1) != modFit2)/length(modFit2)}
misClass
a<-misClass
missClass <- function(modFit2,testSA){sum(((testSA > 0.5)*1) != modFit2)/length(modFit2)}
misClass
missClass
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
y<- as.factor(data(vowel.train))
x<- as.factor(data(vowel.test))
y<- as.factor(vowel.train)
?varImp
vowel.train
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
fit_gbm <- train(vowel.train[, -1], vowel.train$y, method='gbm')
vowel.train$y<-as.factor(vowel.train$y)
vowel.test$y<-as.factor(vowel.test$y)
fit_gbm <- train(vowel.train[, -1], vowel.train$y, method='gbm')
?train
set.seed(33833)
approachrf <- randomForest(vowel.train$y ~ ., ntree = 1050)
approachrf <- train(vowel.train$y ~ ., method="rf")
library(caret)
approachrf <- train(vowel.train$y ~ ., method="rf")
approachrf <- train(vowel.train$y ~ ., method="rf", data=vowel.train)
approachgbm <- train(vowel.train$y ~ ., method="gbm", data=vowel.train)
confusionMatrix(approachrf,vowel.test$y)
confusionMatrix(approachgbm,vowel.test$y)
confusionMatrix(approachgbm,vowel.test)
confusionMatrix(vowel.test$y,approachgbm)
confusionMatrix(vowel.test$y,approachrf)
fit_gbm <- train(vowel.train[, -1], vowel.train$y, method='gbm')
fit_gbm <- train(vowel.train[, -1], vowel.train$y, method='rf')
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.sedd(62433)
set.seed(62433)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
?plot.enet
head(concrete)
?shapiro.test
shapiro.test(rnorm(100, mean = 5, sd = 3))
install.packages (“shiny”)
install.packages ("shiny")
install.packages("devtools")
runApp()
library(shiny)
runApp()
runApp(display.mode='showcase')
library(manipulate); manipulate(plot(1:x), x = slider(1,100))
library(manipulate); manipulate(plot(1:x), x = checkbox(1,100))
library(manipulate); manipulate(plot(1:x), x = picker(1,100))
library(manipulate); manipulate(plot(1:x), x = picker(1,1:100))
library(manipulate); manipulate(plot(1:x), x = picker(1,100,5))
require(rCharts)
install.packages("rCharts")
install_github("ramnathv/rCharts@dev")
library(devtools)
require(rCharts)
install_github('ramnathv/rCharts@dev')
devtools::install_github('ramnathv/rCharts')
require(rCharts)
devtools::install_github('rstudio/shiinyapps')
devtools::install_github('rstudio/shinyapps')
isntall_github("ropensci/plotly")
indtall_github("ropensci/plotly")
install_github("ropensci/plotly")
require(rCharts)
require(knitr)
hair_eye_male <- subset(as.data.frame(HairEyeColor), Sex == "Male")
nPlot(Freq ~ Hair, group = 'Eye', data = hair_eye_male, type = 'multiBarChart')
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
myPlot
myPlot(5)
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
?rCharts
??rCharts
library(rCharts)
library(airquality)
?dTable
shiny::runApp('Desktop/Javier/Cursos/John Hopkins University- Developing data products/Project')
install.packages("googleVis")
shiny::runApp('Desktop/Javier/Cursos/John Hopkins University- Developing data products/Project')
shiny::runApp('Desktop/Javier/Cursos/John Hopkins University- Developing data products/Project')
shiny::runApp('Desktop/Javier/Cursos/John Hopkins University- Developing data products/Project')
shiny::runApp('Desktop/Javier/Cursos/John Hopkins University- Developing data products/Project')
shiny::runApp('Desktop/Javier/Cursos/John Hopkins University- Developing data products/Project')
shiny::runApp('Desktop/Javier/Cursos/John Hopkins University- Developing data products/Project')
shiny::runApp('Desktop/Javier/Cursos/John Hopkins University- Developing data products/Project')
shiny::runApp('Desktop/Javier/Cursos/John Hopkins University- Developing data products/Project')
shiny::runApp('Desktop/Javier/Cursos/John Hopkins University- Developing data products/Project')
shiny::runApp('Desktop/Javier/Cursos/John Hopkins University- Developing data products/Project')
shiny::runApp('Desktop/Javier/Cursos/John Hopkins University- Developing data products/Project')
shiny::runApp('Desktop/Javier/Cursos/John Hopkins University- Developing data products/Project')
shiny::runApp('Desktop/Javier/Cursos/John Hopkins University- Developing data products/Project')
shiny::runApp('Desktop/Javier/Cursos/John Hopkins University- Developing data products/Project')
shiny::runApp('Desktop/Javier/Cursos/John Hopkins University- Developing data products/Project')
shiny::runApp('Desktop/Javier/Cursos/John Hopkins University- Developing data products/Project')
shiny::runApp('Desktop/Javier/Cursos/John Hopkins University- Developing data products/Project')
shiny::runApp('Desktop/Javier/Cursos/John Hopkins University- Developing data products/Project')
install.packages(c("aplpack", "car", "data.table", "DBI", "formatR", "gsubfn", "Hmisc", "httr", "jsonlite", "knitr", "labeling", "maps", "markdown", "minqa", "quantmod", "Rcpp", "RJSONIO", "rmarkdown", "spam", "swirl", "UsingR", "xlsx", "xlsxjars"))
shiny::runApp('Desktop/Javier/Cursos/John Hopkins University- Developing data products/Project')
shiny::runApp('Desktop/Javier/Cursos/John Hopkins University- Developing data products/Project')
shiny::runApp('Desktop/Javier/Cursos/John Hopkins University- Developing data products/Project')
shiny::runApp('Desktop/Javier/Cursos/John Hopkins University- Developing data products/Project')
shiny::runApp('Desktop/Javier/Cursos/John Hopkins University- Developing data products/Project')
shiny::runApp('Desktop/Javier/Cursos/John Hopkins University- Developing data products/Project')
shiny::runApp('Desktop/Javier/Cursos/John Hopkins University- Developing data products/Project')
shiny::runApp('Desktop/Javier/Cursos/John Hopkins University- Developing data products/Project')
shiny::runApp('Desktop/Javier/Cursos/John Hopkins University- Developing data products/Project')
shiny::runApp('Desktop/Javier/Cursos/John Hopkins University- Developing data products/Project')
shiny::runApp('Desktop/Javier/Cursos/John Hopkins University- Developing data products/Project')
setwd("~/Desktop/Javier/Cursos/John Hopkins University- Developing data products/Project")
library(slidify)
author("Body Mass Index calculator")
library(knitr)
browserURL('index.html')
browserURL('index.html')
?browserURL
??browserURL
shiny::runApp('~/Desktop/Javier/Cursos/John Hopkins University- Developing data products/Project')
shiny::runApp('~/Desktop/Javier/Cursos/John Hopkins University- Developing data products/Project')
plot(c("15-18.5", "19-25", "26-30", "30-37"), c("Underweight", "Healthy weight", "Overweight", "Obese"), xlab='weihgt', ylab='BMI', main='Body Mass Index areas')
plot(c("15-18.5", "19-25", "26-30", "30-37"), c("Underweight", "Healthy weight", "Overweight", "Obese"))
plot(c("15-18.5", "19-25", "26-30", "30-37"), c("Underweight", "Healthy weight", "Overweight", "Obese"), xlim = c(15,37))
xf<-factor(x)
plot(as.numeric(xf),rnorm(10),type="l",xaxt="n")
axis(1,at=1:10,labels=xf)
library(ggplot2)
qplot(c("15-18.5", "19-25", "26-30", "30-37"), c("Underweight", "Healthy weight", "Overweight", "Obese"))
library(ggplot2)
qplot(c("15-18.5", "19-25", "26-30", "30-37"), c("Underweight", "Healthy weight", "Overweight", "Obese"), xlab='weihgt', ylab='BMI', main='Body Mass Index areas')
library(ggplot2)
qplot(c("15-18.5", "19-25", "26-30", "30-37"), as.factor(c("Underweight", "Healthy weight", "Overweight", "Obese")), xlab='weihgt', ylab='BMI', main='Body Mass Index areas')
library(ggplot2)
qplot(as.factor(c("15-18.5", "19-25", "26-30", "30-37")), as.factor(c("Underweight", "Healthy weight", "Overweight", "Obese")), xlab='weihgt', ylab='BMI', main='Body Mass Index areas')
library(ggplot2)
qplot(c("15-18.5", "19-25", "26-30", "30-37")), order(c("Underweight", "Healthy weight", "Overweight", "Obese")), xlab='weihgt', ylab='BMI', main='Body Mass Index areas')
library(ggplot2)
qplot(c("15-18.5", "19-25", "26-30", "30-37")), order(c("Underweight", "Healthy weight", "Overweight", "Obese")), xlab='weihgt', ylab='BMI', main='Body Mass Index areas')
library(ggplot2)
qplot(c("15-18.5", "19-25", "26-30", "30-37")) order(c("Underweight", "Healthy weight", "Overweight", "Obese")), xlab='weihgt', ylab='BMI', main='Body Mass Index areas')
library(ggplot2)
qplot(c("15-18.5", "19-25", "26-30", "30-37"), order(c("Underweight", "Healthy weight", "Overweight", "Obese")), xlab='weihgt', ylab='BMI', main='Body Mass Index areas')
library(ggplot2)
qplot(interaction(c("15-18.5", "19-25", "26-30", "30-37"), c("Underweight", "Healthy weight", "Overweight", "Obese")), xlab='weihgt', ylab='BMI', main='Body Mass Index areas')
library(ggplot2)
qplot(c("15-18.5", "19-25", "26-30", "30-37"), c("Underweight", "Healthy weight", "Overweight", "Obese"), xlab='weihgt', ylab='BMI', main='Body Mass Index areas')
library(ggplot2)
qplot(c("15-18.5", "19-25", "26-30", "30-37"), c("Underweight", "Healthy weight", "Overweight", "Obese"), geom = "bar",xlab='weihgt', ylab='BMI', main='Body Mass Index areas')
library(ggplot2)
qplot(c("15-18.5", "19-25", "26-30", "30-37"), c("Underweight", "Healthy weight", "Overweight", "Obese"), geom = "bar",stat="identity", xlab='weihgt', ylab='BMI', main='Body Mass Index areas')
